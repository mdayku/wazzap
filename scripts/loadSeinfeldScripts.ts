/**
 * Script to load Seinfeld scripts from various sources
 * Run with: npx ts-node scripts/loadSeinfeldScripts.ts
 */

import * as admin from 'firebase-admin';
import * as fs from 'fs';
import * as path from 'path';

// Initialize Firebase Admin (if not already initialized)
if (!admin.apps.length) {
  const serviceAccount = require('../firebase-service-account.json');
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

interface ScriptLine {
  character: string;
  line: string;
  episode: string;
  season: number;
  episodeNumber: number;
}

/**
 * Parse Seinfeld scripts from JSON format
 * Expected format: Array of { character, dialogue, episode, season }
 */
async function loadFromJSON(filePath: string): Promise<ScriptLine[]> {
  const rawData = fs.readFileSync(filePath, 'utf-8');
  const data = JSON.parse(rawData);
  
  return data.map((item: any, index: number) => ({
    character: normalizeCharacter(item.character || item.Character),
    line: item.dialogue || item.line || item.Line || '',
    episode: item.episode || item.Episode || 'Unknown',
    season: parseInt(item.season || item.Season) || 0,
    episodeNumber: parseInt(item.episodeNumber || item.EpisodeNumber) || 0,
  }));
}

/**
 * Normalize character names to match our system
 */
function normalizeCharacter(name: string): string {
  const normalized = name.trim().toUpperCase();
  
  if (normalized.includes('JERRY')) return 'Jerry';
  if (normalized.includes('GEORGE')) return 'George';
  if (normalized.includes('ELAINE')) return 'Elaine';
  if (normalized.includes('KRAMER')) return 'Kramer';
  
  return name; // Keep original if not main character
}

/**
 * Filter to only main characters
 */
function filterMainCharacters(lines: ScriptLine[]): ScriptLine[] {
  const mainCharacters = ['Jerry', 'George', 'Elaine', 'Kramer'];
  return lines.filter(line => mainCharacters.includes(line.character));
}

/**
 * Generate embedding for a line using OpenAI
 */
async function generateEmbedding(text: string): Promise<number[]> {
  // This would call OpenAI API - for now, return empty array
  // Will be implemented when we deploy
  return [];
}

/**
 * Upload scripts to Firestore with embeddings
 */
async function uploadToFirestore(lines: ScriptLine[]) {
  const db = admin.firestore();
  const batch = db.batch();
  let count = 0;
  
  console.log(`Uploading ${lines.length} lines to Firestore...`);
  
  for (const line of lines) {
    const docRef = db.collection('seinfeldScripts').doc();
    
    batch.set(docRef, {
      character: line.character,
      line: line.line,
      episode: line.episode,
      season: line.season,
      episodeNumber: line.episodeNumber,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      // embedding will be generated by Cloud Function
    });
    
    count++;
    
    // Firestore batch limit is 500
    if (count % 500 === 0) {
      await batch.commit();
      console.log(`Uploaded ${count} lines...`);
    }
  }
  
  // Commit remaining
  if (count % 500 !== 0) {
    await batch.commit();
  }
  
  console.log(`✅ Successfully uploaded ${count} lines!`);
}

/**
 * Get statistics about the loaded scripts
 */
function getStats(lines: ScriptLine[]) {
  const stats = {
    total: lines.length,
    byCharacter: {} as Record<string, number>,
    bySeason: {} as Record<number, number>,
  };
  
  lines.forEach(line => {
    stats.byCharacter[line.character] = (stats.byCharacter[line.character] || 0) + 1;
    stats.bySeason[line.season] = (stats.bySeason[line.season] || 0) + 1;
  });
  
  return stats;
}

/**
 * Main function
 */
async function main() {
  try {
    console.log('🎭 Loading Seinfeld Scripts...\n');
    
    // Check if data file exists
    const dataPath = path.join(__dirname, 'seinfeld-scripts.json');
    
    if (!fs.existsSync(dataPath)) {
      console.error('❌ Error: seinfeld-scripts.json not found!');
      console.log('\nPlease download Seinfeld scripts and save as:');
      console.log('  scripts/seinfeld-scripts.json');
      console.log('\nSources:');
      console.log('  - https://www.kaggle.com/datasets/thec03u5/seinfeld-chronicles');
      console.log('  - https://colinpollock.net/seinfeld-script-data');
      process.exit(1);
    }
    
    // Load and parse scripts
    console.log('📖 Reading scripts from JSON...');
    const allLines = await loadFromJSON(dataPath);
    console.log(`Found ${allLines.length} total lines\n`);
    
    // Filter to main characters
    console.log('🎯 Filtering to main characters...');
    const mainCharacterLines = filterMainCharacters(allLines);
    console.log(`Kept ${mainCharacterLines.length} lines from Jerry, George, Elaine, Kramer\n`);
    
    // Show statistics
    const stats = getStats(mainCharacterLines);
    console.log('📊 Statistics:');
    console.log(`  Total lines: ${stats.total}`);
    console.log('  By character:');
    Object.entries(stats.byCharacter)
      .sort((a, b) => b[1] - a[1])
      .forEach(([char, count]) => {
        console.log(`    ${char}: ${count} lines`);
      });
    console.log('  By season:');
    Object.entries(stats.bySeason)
      .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
      .forEach(([season, count]) => {
        console.log(`    Season ${season}: ${count} lines`);
      });
    console.log('');
    
    // Upload to Firestore
    console.log('☁️  Uploading to Firestore...');
    await uploadToFirestore(mainCharacterLines);
    
    console.log('\n✨ Done! Seinfeld scripts loaded successfully!');
    console.log('\nNext steps:');
    console.log('  1. Deploy Cloud Function to generate embeddings');
    console.log('  2. Run embedding generation for all scripts');
    console.log('  3. Test agent responses with real script data');
    
  } catch (error) {
    console.error('❌ Error loading scripts:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch(error => {
      console.error(error);
      process.exit(1);
    });
}

export { loadFromJSON, filterMainCharacters, uploadToFirestore };

